@page "/hatirlatici"
@using GorevTakipUygulamasi.Models
@using GorevTakipUygulamasi.Services
@inject ReminderService ReminderService
@inject NavigationManager NavigationManager

<PageTitle>Hatırlatıcı Oluştur</PageTitle>

<div class="container mx-auto p-4 max-w-2xl">
    <h3 class="text-3xl font-bold text-gray-800 mb-6 text-center">Yeni Hatırlatıcı Oluştur</h3>
    <hr class="mb-6 border-gray-300" />

    <EditForm Model="@newReminder" OnValidSubmit="@HandleValidSubmit" class="bg-white shadow-lg rounded-lg p-8">
        <DataAnnotationsValidator />
        <ValidationSummary class="mb-4 text-red-600" />

        <div class="mb-4">
            <label for="title" class="block text-gray-700 text-sm font-bold mb-2">Başlık:</label>
            <InputText id="title" @bind-Value="newReminder.Title" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
        </div>

        <div class="mb-4">
            <label for="description" class="block text-gray-700 text-sm font-bold mb-2">Açıklama:</label>
            <InputTextArea id="description" @bind-Value="newReminder.Description" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline h-24" />
        </div>

        <div class="mb-6">
            <label for="reminderDate" class="block text-gray-700 text-sm font-bold mb-2">Hatırlatma Tarihi:</label>
            <InputDate id="reminderDate" @bind-Value="newReminder.ReminderDate" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
        </div>

        <div class="flex items-center justify-between">
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-300 ease-in-out transform hover:scale-105">
                Hatırlatıcıyı Kaydet
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="mt-6 p-4 rounded-lg @(statusMessage.Contains("başarıyla") ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700")">
            @statusMessage
        </div>
    }

    <h4 class="text-2xl font-bold text-gray-800 mt-10 mb-4 text-center">Bugünün Hatırlatıcıları</h4>
    <hr class="mb-6 border-gray-300" />

    @if (todayReminders == null)
    {
        <p><em>Yükleniyor...</em></p>
    }
    else if (todayReminders.Any())
    {
        <ul class="grid grid-cols-1 md:grid-cols-2 gap-4">
            @foreach (var reminder in todayReminders)
            {
                <li class="bg-white shadow-md rounded-lg p-6 border-l-4 border-blue-500">
                    <h5 class="text-xl font-semibold text-gray-900 mb-2">@reminder.Title</h5>
                    <p class="text-gray-700 mb-3">@reminder.Description</p>
                    <p class="text-sm text-gray-500">Tarih: @reminder.ReminderDate.ToShortDateString()</p>
                    <p class="text-sm text-gray-500">Gönderildi: @(reminder.IsSent ? "Evet" : "Hayır")</p>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="text-center text-gray-600">Bugün için herhangi bir hatırlatıcı bulunamadı.</p>
    }
</div>

@code {
    private Reminder newReminder = new Reminder();
    private string statusMessage = string.Empty;
    private List<Reminder>? todayReminders;

    protected override async Task OnInitializedAsync()
    {
        // Sayfa yüklendiğinde bugünün hatırlatıcılarını getir.
        await LoadTodayReminders();
    }

    private async Task LoadTodayReminders()
    {
        try
        {
            todayReminders = await ReminderService.GetRemindersForDateAsync(DateTime.Today);
        }
        catch (Exception ex)
        {
            statusMessage = $"Hatırlatıcılar yüklenirken bir hata oluştu: {ex.Message}";
            Console.WriteLine($"Hata: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Hatırlatıcı tarihinin sadece tarih kısmını al (saat 00:00:00 olarak ayarlanır)
            newReminder.ReminderDate = newReminder.ReminderDate.Date;

            await ReminderService.AddReminderAsync(newReminder);
            statusMessage = "Hatırlatıcı başarıyla kaydedildi!";
            newReminder = new Reminder(); // Formu temizle
            await LoadTodayReminders(); // Listeyi güncelle
        }
        catch (Exception ex)
        {
            statusMessage = $"Hatırlatıcı kaydedilirken bir hata oluştu: {ex.Message}";
            Console.WriteLine($"Hata: {ex.Message}");
        }
    }
}